// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/routing-api/uaaclient"
	uaa "github.com/cloudfoundry-community/go-uaa"
	"golang.org/x/oauth2"
)

type FakeTokenFetcher struct {
	FetchKeyStub        func() (*uaa.JWK, error)
	fetchKeyMutex       sync.RWMutex
	fetchKeyArgsForCall []struct {
	}
	fetchKeyReturns struct {
		result1 *uaa.JWK
		result2 error
	}
	fetchKeyReturnsOnCall map[int]struct {
		result1 *uaa.JWK
		result2 error
	}
	FetchTokenStub        func(context.Context, bool) (*oauth2.Token, error)
	fetchTokenMutex       sync.RWMutex
	fetchTokenArgsForCall []struct {
		arg1 context.Context
		arg2 bool
	}
	fetchTokenReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	fetchTokenReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenFetcher) FetchKey() (*uaa.JWK, error) {
	fake.fetchKeyMutex.Lock()
	ret, specificReturn := fake.fetchKeyReturnsOnCall[len(fake.fetchKeyArgsForCall)]
	fake.fetchKeyArgsForCall = append(fake.fetchKeyArgsForCall, struct {
	}{})
	stub := fake.FetchKeyStub
	fakeReturns := fake.fetchKeyReturns
	fake.recordInvocation("FetchKey", []interface{}{})
	fake.fetchKeyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTokenFetcher) FetchKeyCallCount() int {
	fake.fetchKeyMutex.RLock()
	defer fake.fetchKeyMutex.RUnlock()
	return len(fake.fetchKeyArgsForCall)
}

func (fake *FakeTokenFetcher) FetchKeyCalls(stub func() (*uaa.JWK, error)) {
	fake.fetchKeyMutex.Lock()
	defer fake.fetchKeyMutex.Unlock()
	fake.FetchKeyStub = stub
}

func (fake *FakeTokenFetcher) FetchKeyReturns(result1 *uaa.JWK, result2 error) {
	fake.fetchKeyMutex.Lock()
	defer fake.fetchKeyMutex.Unlock()
	fake.FetchKeyStub = nil
	fake.fetchKeyReturns = struct {
		result1 *uaa.JWK
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenFetcher) FetchKeyReturnsOnCall(i int, result1 *uaa.JWK, result2 error) {
	fake.fetchKeyMutex.Lock()
	defer fake.fetchKeyMutex.Unlock()
	fake.FetchKeyStub = nil
	if fake.fetchKeyReturnsOnCall == nil {
		fake.fetchKeyReturnsOnCall = make(map[int]struct {
			result1 *uaa.JWK
			result2 error
		})
	}
	fake.fetchKeyReturnsOnCall[i] = struct {
		result1 *uaa.JWK
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenFetcher) FetchToken(arg1 context.Context, arg2 bool) (*oauth2.Token, error) {
	fake.fetchTokenMutex.Lock()
	ret, specificReturn := fake.fetchTokenReturnsOnCall[len(fake.fetchTokenArgsForCall)]
	fake.fetchTokenArgsForCall = append(fake.fetchTokenArgsForCall, struct {
		arg1 context.Context
		arg2 bool
	}{arg1, arg2})
	stub := fake.FetchTokenStub
	fakeReturns := fake.fetchTokenReturns
	fake.recordInvocation("FetchToken", []interface{}{arg1, arg2})
	fake.fetchTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTokenFetcher) FetchTokenCallCount() int {
	fake.fetchTokenMutex.RLock()
	defer fake.fetchTokenMutex.RUnlock()
	return len(fake.fetchTokenArgsForCall)
}

func (fake *FakeTokenFetcher) FetchTokenCalls(stub func(context.Context, bool) (*oauth2.Token, error)) {
	fake.fetchTokenMutex.Lock()
	defer fake.fetchTokenMutex.Unlock()
	fake.FetchTokenStub = stub
}

func (fake *FakeTokenFetcher) FetchTokenArgsForCall(i int) (context.Context, bool) {
	fake.fetchTokenMutex.RLock()
	defer fake.fetchTokenMutex.RUnlock()
	argsForCall := fake.fetchTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTokenFetcher) FetchTokenReturns(result1 *oauth2.Token, result2 error) {
	fake.fetchTokenMutex.Lock()
	defer fake.fetchTokenMutex.Unlock()
	fake.FetchTokenStub = nil
	fake.fetchTokenReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenFetcher) FetchTokenReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.fetchTokenMutex.Lock()
	defer fake.fetchTokenMutex.Unlock()
	fake.FetchTokenStub = nil
	if fake.fetchTokenReturnsOnCall == nil {
		fake.fetchTokenReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.fetchTokenReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchKeyMutex.RLock()
	defer fake.fetchKeyMutex.RUnlock()
	fake.fetchTokenMutex.RLock()
	defer fake.fetchTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ uaaclient.TokenFetcher = new(FakeTokenFetcher)
