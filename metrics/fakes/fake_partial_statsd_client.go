// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/routing-api/metrics"
	"github.com/cactus/go-statsd-client/v5/statsd"
)

type FakePartialStatsdClient struct {
	GaugeStub        func(string, int64, float32, ...statsd.Tag) error
	gaugeMutex       sync.RWMutex
	gaugeArgsForCall []struct {
		arg1 string
		arg2 int64
		arg3 float32
		arg4 []statsd.Tag
	}
	gaugeReturns struct {
		result1 error
	}
	gaugeReturnsOnCall map[int]struct {
		result1 error
	}
	GaugeDeltaStub        func(string, int64, float32, ...statsd.Tag) error
	gaugeDeltaMutex       sync.RWMutex
	gaugeDeltaArgsForCall []struct {
		arg1 string
		arg2 int64
		arg3 float32
		arg4 []statsd.Tag
	}
	gaugeDeltaReturns struct {
		result1 error
	}
	gaugeDeltaReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePartialStatsdClient) Gauge(arg1 string, arg2 int64, arg3 float32, arg4 ...statsd.Tag) error {
	fake.gaugeMutex.Lock()
	ret, specificReturn := fake.gaugeReturnsOnCall[len(fake.gaugeArgsForCall)]
	fake.gaugeArgsForCall = append(fake.gaugeArgsForCall, struct {
		arg1 string
		arg2 int64
		arg3 float32
		arg4 []statsd.Tag
	}{arg1, arg2, arg3, arg4})
	stub := fake.GaugeStub
	fakeReturns := fake.gaugeReturns
	fake.recordInvocation("Gauge", []interface{}{arg1, arg2, arg3, arg4})
	fake.gaugeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePartialStatsdClient) GaugeCallCount() int {
	fake.gaugeMutex.RLock()
	defer fake.gaugeMutex.RUnlock()
	return len(fake.gaugeArgsForCall)
}

func (fake *FakePartialStatsdClient) GaugeCalls(stub func(string, int64, float32, ...statsd.Tag) error) {
	fake.gaugeMutex.Lock()
	defer fake.gaugeMutex.Unlock()
	fake.GaugeStub = stub
}

func (fake *FakePartialStatsdClient) GaugeArgsForCall(i int) (string, int64, float32, []statsd.Tag) {
	fake.gaugeMutex.RLock()
	defer fake.gaugeMutex.RUnlock()
	argsForCall := fake.gaugeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePartialStatsdClient) GaugeReturns(result1 error) {
	fake.gaugeMutex.Lock()
	defer fake.gaugeMutex.Unlock()
	fake.GaugeStub = nil
	fake.gaugeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePartialStatsdClient) GaugeReturnsOnCall(i int, result1 error) {
	fake.gaugeMutex.Lock()
	defer fake.gaugeMutex.Unlock()
	fake.GaugeStub = nil
	if fake.gaugeReturnsOnCall == nil {
		fake.gaugeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.gaugeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePartialStatsdClient) GaugeDelta(arg1 string, arg2 int64, arg3 float32, arg4 ...statsd.Tag) error {
	fake.gaugeDeltaMutex.Lock()
	ret, specificReturn := fake.gaugeDeltaReturnsOnCall[len(fake.gaugeDeltaArgsForCall)]
	fake.gaugeDeltaArgsForCall = append(fake.gaugeDeltaArgsForCall, struct {
		arg1 string
		arg2 int64
		arg3 float32
		arg4 []statsd.Tag
	}{arg1, arg2, arg3, arg4})
	stub := fake.GaugeDeltaStub
	fakeReturns := fake.gaugeDeltaReturns
	fake.recordInvocation("GaugeDelta", []interface{}{arg1, arg2, arg3, arg4})
	fake.gaugeDeltaMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePartialStatsdClient) GaugeDeltaCallCount() int {
	fake.gaugeDeltaMutex.RLock()
	defer fake.gaugeDeltaMutex.RUnlock()
	return len(fake.gaugeDeltaArgsForCall)
}

func (fake *FakePartialStatsdClient) GaugeDeltaCalls(stub func(string, int64, float32, ...statsd.Tag) error) {
	fake.gaugeDeltaMutex.Lock()
	defer fake.gaugeDeltaMutex.Unlock()
	fake.GaugeDeltaStub = stub
}

func (fake *FakePartialStatsdClient) GaugeDeltaArgsForCall(i int) (string, int64, float32, []statsd.Tag) {
	fake.gaugeDeltaMutex.RLock()
	defer fake.gaugeDeltaMutex.RUnlock()
	argsForCall := fake.gaugeDeltaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePartialStatsdClient) GaugeDeltaReturns(result1 error) {
	fake.gaugeDeltaMutex.Lock()
	defer fake.gaugeDeltaMutex.Unlock()
	fake.GaugeDeltaStub = nil
	fake.gaugeDeltaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePartialStatsdClient) GaugeDeltaReturnsOnCall(i int, result1 error) {
	fake.gaugeDeltaMutex.Lock()
	defer fake.gaugeDeltaMutex.Unlock()
	fake.GaugeDeltaStub = nil
	if fake.gaugeDeltaReturnsOnCall == nil {
		fake.gaugeDeltaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.gaugeDeltaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePartialStatsdClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.gaugeMutex.RLock()
	defer fake.gaugeMutex.RUnlock()
	fake.gaugeDeltaMutex.RLock()
	defer fake.gaugeDeltaMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePartialStatsdClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.PartialStatsdClient = new(FakePartialStatsdClient)
