// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"crypto/tls"
	"sync"
)

type MySQLAdapter struct {
	RegisterTLSConfigStub        func(string, *tls.Config) error
	registerTLSConfigMutex       sync.RWMutex
	registerTLSConfigArgsForCall []struct {
		arg1 string
		arg2 *tls.Config
	}
	registerTLSConfigReturns struct {
		result1 error
	}
	registerTLSConfigReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MySQLAdapter) RegisterTLSConfig(arg1 string, arg2 *tls.Config) error {
	fake.registerTLSConfigMutex.Lock()
	ret, specificReturn := fake.registerTLSConfigReturnsOnCall[len(fake.registerTLSConfigArgsForCall)]
	fake.registerTLSConfigArgsForCall = append(fake.registerTLSConfigArgsForCall, struct {
		arg1 string
		arg2 *tls.Config
	}{arg1, arg2})
	stub := fake.RegisterTLSConfigStub
	fakeReturns := fake.registerTLSConfigReturns
	fake.recordInvocation("RegisterTLSConfig", []interface{}{arg1, arg2})
	fake.registerTLSConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *MySQLAdapter) RegisterTLSConfigCallCount() int {
	fake.registerTLSConfigMutex.RLock()
	defer fake.registerTLSConfigMutex.RUnlock()
	return len(fake.registerTLSConfigArgsForCall)
}

func (fake *MySQLAdapter) RegisterTLSConfigCalls(stub func(string, *tls.Config) error) {
	fake.registerTLSConfigMutex.Lock()
	defer fake.registerTLSConfigMutex.Unlock()
	fake.RegisterTLSConfigStub = stub
}

func (fake *MySQLAdapter) RegisterTLSConfigArgsForCall(i int) (string, *tls.Config) {
	fake.registerTLSConfigMutex.RLock()
	defer fake.registerTLSConfigMutex.RUnlock()
	argsForCall := fake.registerTLSConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *MySQLAdapter) RegisterTLSConfigReturns(result1 error) {
	fake.registerTLSConfigMutex.Lock()
	defer fake.registerTLSConfigMutex.Unlock()
	fake.RegisterTLSConfigStub = nil
	fake.registerTLSConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *MySQLAdapter) RegisterTLSConfigReturnsOnCall(i int, result1 error) {
	fake.registerTLSConfigMutex.Lock()
	defer fake.registerTLSConfigMutex.Unlock()
	fake.RegisterTLSConfigStub = nil
	if fake.registerTLSConfigReturnsOnCall == nil {
		fake.registerTLSConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerTLSConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MySQLAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.registerTLSConfigMutex.RLock()
	defer fake.registerTLSConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MySQLAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
